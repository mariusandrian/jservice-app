{"version":3,"sources":["components/ScoreBoard.js","components/QuestionBlock.js","App.js","serviceWorker.js","index.js"],"names":["ScoreBoard","props","handleClick","event","target","id","console","log","decreaseScore","increaseScore","resetScore","className","this","score","onClick","Component","QuestionBlock","setState","isAnswerRevealed","state","question","category","title","value","variant","color","answer","App","getQuestion","tenURL","searchURL","a","fetch","response","json","result","questions","newScore","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d8adcb7a.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class ScoreBoard extends Component {\n    constructor(props) {\n        super(props)\n    }\n    handleClick = (event) => {\n        switch (event.target.id) {\n            case 'decrease':\n                console.log('decrease');\n                this.props.decreaseScore();\n                break;\n            case 'increase':\n                console.log('increase');\n                this.props.increaseScore();\n                break;\n            case 'reset':\n                this.props.resetScore();\n                break;\n        }\n    }\n    render() {\n        return (\n            <div className=\"score-board\">\n                <h2><span className=\"title\">Score : </span> {this.props.score}</h2>\n                    <button id=\"decrease\" onClick={this.handleClick}>Decrease</button>\n                    <button id=\"increase\" onClick={this.handleClick}>Increase</button>\n                    <button id=\"reset\" onClick={this.handleClick}>Reset</button>\n            </div>\n        )\n    }\n}\n\nexport default ScoreBoard\n","import React, { Component } from 'react'\n\nexport class QuestionBlock extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            isAnswerRevealed: false\n        }\n    }\n    handleClick = () => {\n        this.setState({isAnswerRevealed: !this.state.isAnswerRevealed});\n    }\n    render() {\n        return (\n            <div className=\"ques-block\">\n                <h3>Category: {this.props.question.category.title}</h3>\n                <h3>Points: {this.props.question.value}</h3>\n                <h3>Question: {this.props.question.question}</h3>\n                <button variant=\"contained\" color=\"primary\" onClick={this.handleClick}>{!this.state.isAnswerRevealed ? 'Click to Reveal Answer' : 'Click to Hide Answer'}</button>\n                {!this.state.isAnswerRevealed ? '' : \n                    <h3>Answer: {this.props.question.answer}</h3>\n                }\n            </div>\n        )\n    }\n}\n\nexport default QuestionBlock\n","import React, { Component } from 'react'\nimport ScoreBoard from './components/ScoreBoard'\nimport QuestionBlock from './components/QuestionBlock'\nimport './App.css';\n\nexport class App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      questions: [],\n      score: 0\n    }\n  }\n  getQuestion = (event) => {\n    let tenURL = ''\n    if (event.target.id === 'tenQuestions') tenURL = '?count=10';\n\n    this.setState({\n      searchURL: 'https://jservice.io/api/random' + tenURL\n    }, async () => {\n      try {\n        const response = await fetch(this.state.searchURL);\n        const result = await response.json();\n        this.setState({questions: result})\n      } catch(err) {\n        console.log(err);\n      }\n    })\n  }\n  resetScore = () => {\n    this.setState({score: 0});\n  }\n  decreaseScore = () => {\n    \n    if (this.state.score > 0) {\n      let newScore = this.state.score - 1\n      this.setState({score: newScore});\n    }\n  }\n  increaseScore = () => {\n    let newScore = this.state.score + 1;\n    this.setState({score: newScore});\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Welcome to Jeopardy!</h1>\n        <ScoreBoard \n          score={this.state.score} \n          decreaseScore={this.decreaseScore} \n          increaseScore={this.increaseScore}\n          resetScore={this.resetScore}\n        />\n        <h2>Let's Play!</h2>\n        <div className=\"ques-button-container\">\n          <button onClick={this.getQuestion}>Get Question</button>\n          <button id=\"tenQuestions\" onClick={this.getQuestion}>Hard Mode: Get 10 Questions</button>\n        </div>\n        {this.state.questions.map((question, index) => {\n            return (\n              <QuestionBlock key={question.id} index={index} question={question}/>\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}